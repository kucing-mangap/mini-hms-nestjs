// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AppointmentType {
  KONSULTASI
  LAB
  RADIOLOGI
}

enum AppointmentStatus {
  DIJADWALKAN
  DIBATALKAN
  SELESAI
  TIDAK_HADIR
}

model Doctor {
  id Int @id @default(autoincrement())
  firstName String @db.VarChar(255) @map("first_name")
  lastName String @db.VarChar(255) @map("last_name")
  email String @unique
  phone String? @db.VarChar(15)
  passwordHash String @db.VarChar(255) @map("password_hash")
  specialty String @db.VarChar(255)
  experience Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  appointments Appointment[]

  @@map("doctors")
}

model Patient {
  id Int @id @default(autoincrement())
  firstName String @db.VarChar(255) @map("first_name")
  lastName String @db.VarChar(255) @map("last_name")
  email String @unique
  phone String? @db.VarChar(15)
  passwordHash String @db.VarChar(255) @map("password_hash")
  dateOfBirth DateTime @map("date_of_birth")
  medicalHistory String @map("medical_history")
  allergies String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  appointments Appointment[]

  @@map("patients")
}

model Admin {
  id Int @id @default(autoincrement())
  firstName String @db.VarChar(255) @map("first_name")
  lastName String? @db.VarChar(255) @map("last_name")
  email String @unique
  passwordHash String @map("password_hash")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("admin")
}

model Appointment {
  id Int @id @default(autoincrement())
  patientId Int @map("patient_id")
  doctorId Int @map("doctor_id")
  appointmentDate DateTime @map("appointment_date")
  appointmentType AppointmentType @default(KONSULTASI) @map("appointment_type")
  appointmentStatus AppointmentStatus @default(DIJADWALKAN) @map("appointment_status")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  doctor Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("appointments")
}

model MedicalRecord {
  id Int @id @default(autoincrement())
  appointmentId Int @map("appointment_id")
  doctorId Int @map("doctor_id")
  recordNotes String @map("record_notes")
  diagnosis String @db.VarChar(255)
  prescribedMedication String @map("prescribed_medication")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("medical_records")
}